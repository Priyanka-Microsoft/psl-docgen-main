name: CI-Validate Deployment

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull requests to the main branch
    types:
      - opened
      - ready_for_review
      - reopened
      - synchronize

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az --version  # Verify installation

      - name: Login to Azure
        run: |
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          # Check if service principal exists
          az ad sp show --id ${{ secrets.AZURE_CLIENT_ID }}

      - name: Install Bicep CLI
        run: az bicep install

      - name: Generate Unique Solution Prefix
        id: generate_solution_prefix
        run: |
          set -e
          COMMON_PART="pslc"
          TIMESTAMP=$(date +%s)  
          UPDATED_TIMESTAMP=$(echo $TIMESTAMP | tail -c 3) 
          UNIQUE_SOLUTION_PREFIX="${COMMON_PART}${UPDATED_TIMESTAMP}"
          echo "SOLUTION_PREFIX=${UNIQUE_SOLUTION_PREFIX}" >> $GITHUB_ENV
          echo "Generated SOLUTION_PREFIX: ${UNIQUE_SOLUTION_PREFIX}"

      # Changed to use deployment.json instead of main.bicep
      - name: Deploy ARM Template (JSON) at Subscription Level
        id: deploy
        run: |
          set -e
          echo "Deploying ARM template at the subscription level...."
          az deployment sub create \
            --location NorthCentralUS \
            --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} \
            --template-file infrastructure/deployment.json \
           
      - name: List KeyVaults and Store in Array
        id: list_keyvaults
        run: |
          set -e
          echo "Listing all KeyVaults in the subscription..."
          
          # Get the list of KeyVaults in the subscription
          keyvaults=$(az resource list --resource-type "Microsoft.KeyVault/vaults" --query "[].name" -o tsv)

          if [ -z "$keyvaults" ]; then
            echo "No KeyVaults found in the subscription."
            echo "KEYVAULTS=[]" >> $GITHUB_ENV  # If no KeyVaults found, set an empty array
          else
            echo "KeyVaults found: $keyvaults"

            # Format the list into an array with proper formatting (no trailing comma)
            keyvault_array="[" 
            first=true
            for kv in $keyvaults; do
              if [ "$first" = true ]; then
                keyvault_array="$keyvault_array\"$kv\""
                first=false
              else
                keyvault_array="$keyvault_array,\"$kv\""
              fi
            done
            keyvault_array="$keyvault_array]"

            # Output the formatted array and save it to the environment variable
            echo "KEYVAULTS=$keyvault_array" >> $GITHUB_ENV
          fi

      - name: Send Notification on Failure
        if: failure()
        run: |

          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      
          # Construct the email body
          EMAIL_BODY=$(cat <<EOF
          {
            "body": "<p>Dear Team,</p><p>We would like to inform you that the Client Advisor Automation process has encountered an issue and has failed to complete successfully.</p><p><strong>Build URL:</strong> ${RUN_URL}<br> ${OUTPUT}</p><p>Please investigate the matter at your earliest convenience.</p><p>Best regards,<br>Your Automation Team</p>"
          }
          EOF
          )
      
          # Send the notification
          curl -X POST "${{ secrets.LOGIC_APP_URL }}" \
            -H "Content-Type: application/json" \
            -d "$EMAIL_BODY" || echo "Failed to send notification"